// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/scheduleAPI.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ScheduleController {
  public static partial class ScheduleAPI
  {
    static readonly string __ServiceName = "scheduleAPI.ScheduleAPI";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.GroupsTypeReply> __Marshaller_scheduleAPI_GroupsTypeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.GroupsTypeReply.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.ClassesRequest> __Marshaller_scheduleAPI_ClassesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.ClassesRequest.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.ClassesReply> __Marshaller_scheduleAPI_ClassesReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.ClassesReply.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.GroupsNameRequest> __Marshaller_scheduleAPI_GroupsNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.GroupsNameRequest.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.GroupsNameReply> __Marshaller_scheduleAPI_GroupsNameReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.GroupsNameReply.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.WeeksTypeRequest> __Marshaller_scheduleAPI_WeeksTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.WeeksTypeRequest.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.WeeksTypeReply> __Marshaller_scheduleAPI_WeeksTypeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.WeeksTypeReply.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.ScheduleRequest> __Marshaller_scheduleAPI_ScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.ScheduleRequest.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.ScheduleReply> __Marshaller_scheduleAPI_ScheduleReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.ScheduleReply.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.DateScheduleRequest> __Marshaller_scheduleAPI_DateScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.DateScheduleRequest.Parser));
    static readonly grpc::Marshaller<global::ScheduleController.DateScheduleReply> __Marshaller_scheduleAPI_DateScheduleReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ScheduleController.DateScheduleReply.Parser));

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::ScheduleController.GroupsTypeReply> __Method_GetGroupType = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::ScheduleController.GroupsTypeReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetGroupType",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_scheduleAPI_GroupsTypeReply);

    static readonly grpc::Method<global::ScheduleController.ClassesRequest, global::ScheduleController.ClassesReply> __Method_GetClasses = new grpc::Method<global::ScheduleController.ClassesRequest, global::ScheduleController.ClassesReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetClasses",
        __Marshaller_scheduleAPI_ClassesRequest,
        __Marshaller_scheduleAPI_ClassesReply);

    static readonly grpc::Method<global::ScheduleController.GroupsNameRequest, global::ScheduleController.GroupsNameReply> __Method_GetGroupsName = new grpc::Method<global::ScheduleController.GroupsNameRequest, global::ScheduleController.GroupsNameReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetGroupsName",
        __Marshaller_scheduleAPI_GroupsNameRequest,
        __Marshaller_scheduleAPI_GroupsNameReply);

    static readonly grpc::Method<global::ScheduleController.WeeksTypeRequest, global::ScheduleController.WeeksTypeReply> __Method_GetWeeksType = new grpc::Method<global::ScheduleController.WeeksTypeRequest, global::ScheduleController.WeeksTypeReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWeeksType",
        __Marshaller_scheduleAPI_WeeksTypeRequest,
        __Marshaller_scheduleAPI_WeeksTypeReply);

    static readonly grpc::Method<global::ScheduleController.ScheduleRequest, global::ScheduleController.ScheduleReply> __Method_GetScheduleByGroupName = new grpc::Method<global::ScheduleController.ScheduleRequest, global::ScheduleController.ScheduleReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetScheduleByGroupName",
        __Marshaller_scheduleAPI_ScheduleRequest,
        __Marshaller_scheduleAPI_ScheduleReply);

    static readonly grpc::Method<global::ScheduleController.DateScheduleRequest, global::ScheduleController.DateScheduleReply> __Method_GetDateScheduleByGroupName = new grpc::Method<global::ScheduleController.DateScheduleRequest, global::ScheduleController.DateScheduleReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetDateScheduleByGroupName",
        __Marshaller_scheduleAPI_DateScheduleRequest,
        __Marshaller_scheduleAPI_DateScheduleReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ScheduleController.ScheduleAPIReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ScheduleAPI</summary>
    [grpc::BindServiceMethod(typeof(ScheduleAPI), "BindService")]
    public abstract partial class ScheduleAPIBase
    {
      public virtual global::System.Threading.Tasks.Task GetGroupType(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::ScheduleController.GroupsTypeReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetClasses(global::ScheduleController.ClassesRequest request, grpc::IServerStreamWriter<global::ScheduleController.ClassesReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetGroupsName(global::ScheduleController.GroupsNameRequest request, grpc::IServerStreamWriter<global::ScheduleController.GroupsNameReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetWeeksType(global::ScheduleController.WeeksTypeRequest request, grpc::IServerStreamWriter<global::ScheduleController.WeeksTypeReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetScheduleByGroupName(global::ScheduleController.ScheduleRequest request, grpc::IServerStreamWriter<global::ScheduleController.ScheduleReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetDateScheduleByGroupName(global::ScheduleController.DateScheduleRequest request, grpc::IServerStreamWriter<global::ScheduleController.DateScheduleReply> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ScheduleAPIBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetGroupType, serviceImpl.GetGroupType)
          .AddMethod(__Method_GetClasses, serviceImpl.GetClasses)
          .AddMethod(__Method_GetGroupsName, serviceImpl.GetGroupsName)
          .AddMethod(__Method_GetWeeksType, serviceImpl.GetWeeksType)
          .AddMethod(__Method_GetScheduleByGroupName, serviceImpl.GetScheduleByGroupName)
          .AddMethod(__Method_GetDateScheduleByGroupName, serviceImpl.GetDateScheduleByGroupName).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScheduleAPIBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetGroupType, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::ScheduleController.GroupsTypeReply>(serviceImpl.GetGroupType));
      serviceBinder.AddMethod(__Method_GetClasses, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ScheduleController.ClassesRequest, global::ScheduleController.ClassesReply>(serviceImpl.GetClasses));
      serviceBinder.AddMethod(__Method_GetGroupsName, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ScheduleController.GroupsNameRequest, global::ScheduleController.GroupsNameReply>(serviceImpl.GetGroupsName));
      serviceBinder.AddMethod(__Method_GetWeeksType, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ScheduleController.WeeksTypeRequest, global::ScheduleController.WeeksTypeReply>(serviceImpl.GetWeeksType));
      serviceBinder.AddMethod(__Method_GetScheduleByGroupName, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ScheduleController.ScheduleRequest, global::ScheduleController.ScheduleReply>(serviceImpl.GetScheduleByGroupName));
      serviceBinder.AddMethod(__Method_GetDateScheduleByGroupName, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ScheduleController.DateScheduleRequest, global::ScheduleController.DateScheduleReply>(serviceImpl.GetDateScheduleByGroupName));
    }

  }
}
#endregion
